//lengths
#define SPACE 50
#define HEIGHT 1000

//angles
#define NINETY 2000
#define ONEEIGHTY 2400


// Change these depending on how the robot is wired
#define LEFT OUT_C
#define RIGHT OUT_B
#define WHEELS OUT_BC
#define PEN OUT_A

#define POWER 50

/**
 * Move the robot forward.
 */
void forward(int msec) {
    OnFwd(WHEELS, POWER);
    Wait(msec);
    Off(WHEELS);
}

/**
 * Move the robot backwards.
 */
void backward(int msec) {
    OnRev(WHEELS, POWER);
    Wait(msec);
    Off(WHEELS);
}

/**
 * Turns the robot left.
 */
void turn_left(int msec) {
    OnFwd(RIGHT, POWER*2);
    Wait(msec);
    Off(RIGHT);
}

/**
 * Turns the robot right.
 */
void turn_right(int msec) {
    OnFwd(LEFT, POWER*2);
    Wait(msec);
    Off(LEFT);
}


/**
 * Raise the wheel holding the pen.
 */
void raise_arm() {
    OnRev(PEN, POWER/2);
    Wait(500);
    Off(PEN);
}

/**
 * Lowers the wheel holding the pen.
 */
void lower_arm() {
    OnFwd(PEN, POWER/2);
    Wait(500);
    Off(PEN);
}

/* 
   always start at lower left corner, facing up
   remember to place space at end of each letter so that it creates space, faces up for next letter
   lengths:
   
   
   angles:
*/
void one(){
    lower_arm();
    forward(HEIGHT);
    raise_arm();
    backward(HEIGHT);
    turn_right(NINETY);
    forward(SPACE);
    turn_left(NINETY);
}

void zero(){

    lower_arm();
    forward(HEIGHT);
    turn_right(NINETY*4);
    raise_arm();
    backward(HEIGHT);
    turn_right(NINETY);
    forward(SPACE);
    turn_left(NINETY);
    
}

void A(){
	lower_arm();
	forward(HEIGHT);
        raise_arm();
	turn_right(NINETY);
        lower_arm();
	forward(HEIGHT/2);
        raise_arm();
	turn_right(NINETY);
        lower_arm();
	forward(HEIGHT*2);
	raise_arm();
	backward(HEIGHT/2);
	turn_right(NINETY);
	lower_arm();
	forward(HEIGHT);
	raise_arm();
	backward(HEIGHT/2);
	turn_left(NINETY);
	forward(HEIGHT/2);
	turn_left(NINETY);
	forward(SPACE);
	turn_left(NINETY);
	


}

void B(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	backward(HEIGHT/2);
	turn_left(NINETY);
	lower_arm();
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	turn_right(ONEEIGHTY);
	forward(HEIGHT/2);
	forward(SPACE);
	turn_left(NINETY);
	
}

void C(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	backward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT);
	turn_left(NINETY);
	lower_arm();
	forward(HEIGHT/2);
	raise_arm();
	forward(SPACE);
	turn_left(NINETY);
	



}

void D(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	turn_right(ONEEIGHTY);
	forward (HEIGHT/2);
	forward(SPACE);
	turn_left(NINETY);
}



void E(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(90);
	raise_arm();
	backward(90);
	turn_left(NINETY);
	backward(HEIGHT/2);
	turn_right(NINETY);
	lower_arm();
	forward(90);
	raise_arm();
	backward(90);
	turn_left(NINETY);
	backward(HEIGHT/2);
	turn_right(NINETY);
	lower_arm();
	forward(90);
	
	//done with E
	raise_arm();
	forward(SPACE);
	turn_left(NINETY);
	
}
void F(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	backward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_left(NINETY);
	lower_arm();
	forward(HEIGHT/2);
	raise_arm();
	backward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT/2);
	forward(SPACE);
	turn_left(NINETY);
	

}
void G(){
	lower_arm();
	forward(HEIGHT);
	raise_arm();
	turn_right(NINETY); // I made this up - the ninety part
	lower_arm();
	forward(HEIGHT/2);
	backward(HEIGHT/2);
	turn_right(NINETY); // Also made up
	
	//I didn't finish this letter.

}
void H(){

}


void I(){
	lower_arm();
	forward(HEIGHT);
	raise_arm();
	backward(HEIGHT);
	turn_right(NINETY);
	forward(SPACE);
	turn_left(NINETY);

}

void J(){


}
void K(){

}
void L(){

}
void M(){

}
void N(){
}


void O(){
	lower_arm();
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	turn_right(NINETY);
	forward(HEIGHT);
	turn_right(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	turn_right(ONEEIGHTY);
	forward (HEIGHT/2);
	forward(SPACE);
	turn_left(NINETY);
}
void P(){
}
void Q(){
}
void R(){
}
void S(){
}
void T(){
}

void U(){

	lower_arm();
	forward(HEIGHT);
	raise_arm();
	backward(HEIGHT);
	turn_right(NINETY);
	lower_arm();
	forward(HEIGHT/2);
	turn_left(NINETY);
	forward(HEIGHT/2);
	raise_arm();
	backward(HEIGHT);
	turn_right(NINETY);
	forward(SPACE);
	turn_left(NINETY);
}



void V(){
}
void W(){
}
void X(){
}
void Z(){
}

task main(){
   A();
   B();
   C();
}
